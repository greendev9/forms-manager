@model SharedAssemblies.Models.CustomerGet

@{
    ViewBag.Title = "My Account";
    ViewBag.Page = ViewBag.Title;
}

<div class="container-fluid">
    <div class="row">
        <div class="col-md-12">
            <div class="card">
                <form asp-action="MyAccount" method="post">
                    <div class="card-body">
                        <h4 class="header-title">@ViewBag.Page</h4>
                        @Html.AntiForgeryToken()
                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                        @Html.HiddenFor(model => model.ID)
                        @Html.HiddenFor(model => model.returnUrl)
                        <div class="form-group">
                            <label>Customer Code : @Model.CustomerCode</label>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.BusinessName, htmlAttributes: new { @class = "col-form-label" })
                            @Html.EditorFor(model => model.BusinessName, new { htmlAttributes = new { @class = "form-control", @placeholder = Html.DisplayNameFor(model => model.BusinessName) } })
                            @Html.ValidationMessageFor(model => model.BusinessName, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.BusinessSubTitle, htmlAttributes: new { @class = "col-form-label" })
                            @Html.EditorFor(model => model.BusinessSubTitle, new { htmlAttributes = new { @class = "form-control", @placeholder = Html.DisplayNameFor(model => model.BusinessSubTitle) } })
                            @Html.ValidationMessageFor(model => model.BusinessSubTitle, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-row">
                            <div class="form-group col-md-6">
                                @Html.LabelFor(model => model.ContactFirstName, htmlAttributes: new { @class = "col-form-label" })
                                @Html.EditorFor(model => model.ContactFirstName, new { htmlAttributes = new { @class = "form-control", @placeholder = Html.DisplayNameFor(model => model.ContactFirstName) } })
                                @Html.ValidationMessageFor(model => model.ContactFirstName, "", new { @class = "text-danger" })
                            </div>
                            <div class="form-group col-md-6">
                                @Html.LabelFor(model => model.ContactLastName, htmlAttributes: new { @class = "col-form-label" })
                                @Html.EditorFor(model => model.ContactLastName, new { htmlAttributes = new { @class = "form-control", @placeholder = Html.DisplayNameFor(model => model.ContactLastName) } })
                                @Html.ValidationMessageFor(model => model.ContactLastName, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.ContactEmail, htmlAttributes: new { @class = "col-form-label" })
                            @Html.EditorFor(model => model.ContactEmail, new { htmlAttributes = new { @class = "form-control", @placeholder = Html.DisplayNameFor(model => model.ContactEmail) } })
                            @Html.ValidationMessageFor(model => model.ContactEmail, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.Address, htmlAttributes: new { @class = "col-form-label" })
                            @Html.EditorFor(model => model.Address, new { htmlAttributes = new { @class = "form-control", @placeholder = Html.DisplayNameFor(model => model.Address) } })
                            @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.City, htmlAttributes: new { @class = "col-form-label" })
                            @Html.EditorFor(model => model.City, new { htmlAttributes = new { @class = "form-control", @placeholder = Html.DisplayNameFor(model => model.City) } })
                            @Html.ValidationMessageFor(model => model.City, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.State, htmlAttributes: new { @class = "col-form-label" })
                            @Html.DropDownList("State", null, htmlAttributes: new { @class = "form-control" })
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.Zip, htmlAttributes: new { @class = "col-form-label" })
                            @Html.EditorFor(model => model.Zip, new { htmlAttributes = new { @class = "form-control", @placeholder = Html.DisplayNameFor(model => model.Zip) } })
                            @Html.ValidationMessageFor(model => model.Zip, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.Phone, htmlAttributes: new { @class = "col-form-label" })
                            @Html.EditorFor(model => model.Phone, new { htmlAttributes = new { @class = "form-control", @placeholder = Html.DisplayNameFor(model => model.Phone) } })
                            @Html.ValidationMessageFor(model => model.Phone, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.Province, htmlAttributes: new { @class = "col-form-label" })
                            @Html.EditorFor(model => model.Province, new { htmlAttributes = new { @class = "form-control", @placeholder = Html.DisplayNameFor(model => model.Province) } })
                            @Html.ValidationMessageFor(model => model.Province, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.PostalCode, htmlAttributes: new { @class = "col-form-label" })
                            @Html.EditorFor(model => model.PostalCode, new { htmlAttributes = new { @class = "form-control", @placeholder = Html.DisplayNameFor(model => model.PostalCode) } })
                            @Html.ValidationMessageFor(model => model.PostalCode, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.Country, htmlAttributes: new { @class = "col-form-label" })
                            @Html.EditorFor(model => model.Country, new { htmlAttributes = new { @class = "form-control", @placeholder = Html.DisplayNameFor(model => model.Country) } })
                            @Html.ValidationMessageFor(model => model.Country, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.Country, htmlAttributes: new { @class = "col-form-label" })
                            @Html.EditorFor(model => model.Country, new { htmlAttributes = new { @class = "form-control", @placeholder = Html.DisplayNameFor(model => model.Country) } })
                            @Html.ValidationMessageFor(model => model.Country, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.AboutUsText, htmlAttributes: new { @class = "col-form-label" })
                            @Html.EditorFor(model => model.AboutUsText, new { htmlAttributes = new { @class = "form-control", @placeholder = Html.DisplayNameFor(model => model.AboutUsText) } })
                            @Html.ValidationMessageFor(model => model.AboutUsText, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.LogoFile, htmlAttributes: new { @class = "col-form-label" }) <br />
                            @if (!String.IsNullOrEmpty(Model.LogoFile))
                            {
                                <img src="~/assets/images/logos/@Model.LogoFile" id="img" class="thumbnail border" width="200" height="200" /><br /><br />
                                <label for="Image" id="btnAddLogo" class="btn btn-info waves-effect waves-light" style="display:none;">Add Logo</label>
                                <button type="button" id="btnRemoveLogo" class="btn btn-danger waves-effect waves-light">Remove Logo</button>
                            }
                            else
                            {
                                <img src="~/assets/images/logos/add-logo.jpg" id="img" class="thumbnail border" width="200" height="200" /><br /><br />
                                <label for="Image" id="btnAddLogo" class="btn btn-info waves-effect waves-light">Add Logo</label>
                                <button type="button" id="btnRemoveLogo" class="btn btn-danger waves-effect waves-light" style="display:none;">Remove Logo</button>
                            }
                            <input type="text" id="LogoFile" name="LogoFile" value="@Model.LogoFile" hidden />
                            <input type="file" id="Image" class="" accept="image/png, image/jpg, image/jpeg" style="display:none;" />
                        </div>
                    </div>
                    <div class="card-body">
                        <div class="form-group mb-0">
                            <button type="submit" class="btn btn-info waves-effect waves-light"><i class="fa fa-check"></i> Save</button>
                            <a href="@Model.returnUrl" class="btn btn-dark waves-effect waves-light">Cancel</a>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

@section Scripts{
    <script type="text/javascript">
        $('#Image').on('change', function () {
            loadFile(this);
        });
        function loadFile(input) {
            if (input.files && input.files[0]) {
                var reader = new FileReader();
                var fileName = input.files[0]['name'];
                var idxDot = fileName.lastIndexOf(".") + 1;
                var extFile = fileName.substr(idxDot, fileName.length).toLowerCase();
                var maxFileSize = 100 * 1024;

                if (input.files[0].size > maxFileSize) {
                    alert("File must not exceed 100 kb!");
                }
                else {
                    reader.onload = function (e) {
                        var image = new Image();
                        image.src = e.target.result;

                        image.onload = function () {
                            var model = {
                                id: @Model.ID,
                                logo: e.target.result,
                                extension: extFile
                            };

                            $.ajax({
                                type: "POST",
                                url: '@Url.Content("~/")' + "UserSetup/UploadLogo",
                                data: JSON.stringify(model),
                                contentType: "application/json; charset=utf-8",
                                dataType: "json",
                                success: function (response) {
                                    if (response.success) {
                                        $('#img').attr('src', response.src);
                                        $('#btnAddLogo').hide();
                                        $('#btnRemoveLogo').show();
                                    }
                                    $("#LogoFile").val(response.logoName);
                                },
                                error: function () {
                                    alert("Error!");
                                }
                            });
                        }
                    };
                    reader.readAsDataURL(input.files[0]);
                }
            };
        };

        $("#btnRemoveLogo").click(function () {
            $('#img').attr('src', '/assets/images/logos/add-logo.jpg');
            $('#btnAddLogo').show();
            $('#btnRemoveLogo').hide();
            $("#LogoFile").val("");
        });
    </script>
}
