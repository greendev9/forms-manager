@model Admin.ViewModels.ClientViewModel

@{
    ViewBag.Title = ViewBag.Page;

    string formAction = "";
    if (ViewBag.Page == "Add User") { formAction = "AddUser"; }
    else { formAction = "UpdateUser"; }
}
<link href="~/assets/libs/jquery-ui/themes/base/jquery-ui.min.css" rel="stylesheet" type="text/css" />

<div class="container-fluid">
    <div class="row">
        <div class="col-md-12">
            <div class="card">
                <form asp-action="@formAction" method="post">
                    <div class="card-body">
                        <h4 class="header-title">@ViewBag.Page</h4>
                        @Html.AntiForgeryToken()
                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                        @Html.HiddenFor(model => model.ID)
                        <div class="form-row">
                            <div class="form-group col-md-6">
                                @Html.LabelFor(model => model.FirstName, htmlAttributes: new { @class = "col-form-label" })
                                @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control", @placeholder = Html.DisplayNameFor(model => model.FirstName) } })
                                @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
                            </div>
                            <div class="form-group col-md-6">
                                @Html.LabelFor(model => model.LastName, htmlAttributes: new { @class = "col-form-label" })
                                @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control", @placeholder = Html.DisplayNameFor(model => model.LastName) } })
                                @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-row">
                            <div class="form-group col-md-6">
                                @Html.LabelFor(model => model.PhoneNumber, htmlAttributes: new { @class = "col-form-label" })
                                @Html.EditorFor(model => model.PhoneNumber, new { htmlAttributes = new { @class = "form-control", @placeholder = Html.DisplayNameFor(model => model.PhoneNumber) } })
                                @Html.ValidationMessageFor(model => model.PhoneNumber, "", new { @class = "text-danger" })
                            </div>
                            <div class="form-group col-md-6">
                                @Html.LabelFor(model => model.HomePhone, htmlAttributes: new { @class = "col-form-label" })
                                @Html.EditorFor(model => model.HomePhone, new { htmlAttributes = new { @class = "form-control", @placeholder = Html.DisplayNameFor(model => model.HomePhone) } })
                                @Html.ValidationMessageFor(model => model.HomePhone, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "col-form-label" })
                            @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control", @placeholder = Html.DisplayNameFor(model => model.Email) } })
                            @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.EmergencyContact, htmlAttributes: new { @class = "col-form-label" })
                            @Html.EditorFor(model => model.EmergencyContact, new { htmlAttributes = new { @class = "form-control", @placeholder = Html.DisplayNameFor(model => model.EmergencyContact) } })
                            @Html.ValidationMessageFor(model => model.EmergencyContact, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.Address, htmlAttributes: new { @class = "col-form-label" })
                            @Html.EditorFor(model => model.Address, new { htmlAttributes = new { @class = "form-control", @placeholder = Html.DisplayNameFor(model => model.Address) } })
                            @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.City, htmlAttributes: new { @class = "col-form-label" })
                            @Html.EditorFor(model => model.City, new { htmlAttributes = new { @class = "form-control", @placeholder = Html.DisplayNameFor(model => model.City) } })
                            @Html.ValidationMessageFor(model => model.City, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.State, htmlAttributes: new { @class = "col-form-label" })
                            @Html.DropDownList("State", null, htmlAttributes: new { @class = "form-control" })
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.ZipCode, htmlAttributes: new { @class = "col-form-label" })
                            @Html.EditorFor(model => model.ZipCode, new { htmlAttributes = new { @class = "form-control", @placeholder = Html.DisplayNameFor(model => model.ZipCode) } })
                            @Html.ValidationMessageFor(model => model.ZipCode, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.Occupation, htmlAttributes: new { @class = "col-form-label" })
                            @Html.EditorFor(model => model.Occupation, new { htmlAttributes = new { @class = "form-control", @placeholder = Html.DisplayNameFor(model => model.Occupation) } })
                            @Html.ValidationMessageFor(model => model.Occupation, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.DOB, htmlAttributes: new { @class = "col-form-label" })
                            <input type="text" class="form-control" id="DOB" name="DOB" value="@Model.DOB" />
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.PreferredMethodOfComm, htmlAttributes: new { @class = "col-form-label" })
                            @Html.EditorFor(model => model.PreferredMethodOfComm, new { htmlAttributes = new { @class = "form-control", @placeholder = Html.DisplayNameFor(model => model.PreferredMethodOfComm) } })
                            @Html.ValidationMessageFor(model => model.PreferredMethodOfComm, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group">
                            @Html.HiddenFor(model => model.Active)
                            <div class="custom-control custom-switch">
                                <input type="checkbox" class="custom-control-input" onchange=isActive() id="chkActive" checked>
                                <label class="custom-control-label" for="chkActive">@Html.DisplayNameFor(model => model.Active)</label>
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.HiddenFor(model => model.Admin)
                            <div class="custom-control custom-switch">
                                <input type="checkbox" class="custom-control-input" onchange=isAdmin() id="chkAdmin" checked>
                                <label class="custom-control-label" for="chkAdmin">@Html.DisplayNameFor(model => model.Admin)</label>
                            </div>
                        </div>
                        @if (ViewBag.Page == "Update User")
                        {
                            <div class="form-group">
                                @Html.LabelFor(model => model.Avatar, htmlAttributes: new { @class = "col-form-label" }) <br />
                                @if (!String.IsNullOrEmpty(Model.Avatar))
                                {
                                    <img src="~/assets/images/users/@Model.Avatar" id="img" class="thumbnail" width="128" height="128" /><br /><br />
                                    <label for="Image" id="btnAddAvatar" class="btn btn-info waves-effect waves-light" style="display:none;">Add Avatar</label>
                                    <button type="button" id="btnRemoveAvatar" class="btn btn-danger waves-effect waves-light">Remove Avatar</button>
                                }
                                else
                                {
                                    <img src="~/assets/images/users/no-avatar.jpg" id="img" class="thumbnail" width="128" height="128" /><br /><br />
                                    <label for="Image" id="btnAddAvatar" class="btn btn-info waves-effect waves-light">Add Avatar</label>
                                    <button type="button" id="btnRemoveAvatar" class="btn btn-danger waves-effect waves-light" style="display:none;">Remove Avatar</button>
                                }
                                <input type="file" id="Image" class="" accept="image/*" style="display:none;" />
                            </div>
                        }
                        <div class="form-group">
                            @Html.LabelFor(model => model.Roles, htmlAttributes: new { @class = "col-form-label" })
                            <select id="Roles" name="Roles" class="form-control select2-multiple" data-toggle="select2" multiple="multiple" data-placeholder="Choose ...">
                                @foreach (var item in Model.AllRoles)
                                {
                                    var selected = item.Selected == true ? "selected" : string.Empty;
                                    <option value="@item.Value" @selected>@item.Text</option>
                                }
                            </select>
                        </div>
                    </div>
                    <div class="card-body">
                        <div class="form-group mb-0">
                            <button type="submit" class="btn btn-info waves-effect waves-light"><i class="fa fa-check"></i> Save</button>
                            @if (ViewBag.Page == "Update User")
                            {
                                <a id="btnDelete" class="btn btn-danger waves-effect waves-light text-white">Delete</a>
                            }
                            <a href="~/UserSetup/Users" class="btn btn-dark waves-effect waves-light">Cancel</a>
                        </div>
                    </div>
                </form>
                @if (ViewBag.Page == "Update User")
                {
                    <div class="card-body">
                        <p class="sub-header">
                            Last Login Date: <code class="highlighter-rouge">@Model.LastLoginDate</code><br />
                            Last Login IP: <code class="highlighter-rouge">@Model.LastLoginIP</code>
                        </p>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="~/Scripts/jquery.validate.min.js"></script>
    <script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>
    <script src="~/Scripts/jquery-ui-1.12.1.min.js"></script>

    <script type="text/javascript">
        $(function () {
            $('#DOB').datepicker();
        });
    </script>

    <script type="text/javascript">
        $(document).ready(function () {
            if ($("#Active").val() == 1) { $("#chkActive").prop("checked", true); }
            else { $("#chkActive").prop("checked", false); }

            if ($("#Admin").val() == 1) { $("#chkAdmin").prop("checked", true); }
            else { $("#chkAdmin").prop("checked", false); }

            isActive();
            isAdmin();
        });

        function isActive() {
            if ($("#chkActive").is(":checked")) { $("#Active").val(1); }
            else { $("#Active").val(0); }
        }
        function isAdmin() {
            if ($("#chkAdmin").is(":checked")) { $("#Admin").val(1); }
            else { $("#Admin").val(0); }
        }
    </script>

    @if (ViewBag.Page == "Update User")
    {
        <script type="text/javascript">
            $('#btnDelete').click(function () {
                var confMsg = confirm("Are you sure you want to delete this user?");
                if (confMsg == true) {
                    var url = '@Url.Content("~/")' + "UserSetup/DeleteUser";
                    $.post(url, { id: $("#ID").val() }, function (data) {
                        if (data != true) {
                            alear("Sorry user not deleted.");
                        }
                        else {
                            window.location.href = '@Url.Content("~/")' + "UserSetup/Users";
                        }
                    });
                }
            });

            $('#Image').on('change', function () {
                loadFile(this);
            });
            function loadFile(input) {
                if (input.files && input.files[0]) {
                    var reader = new FileReader();
                    var fileName = input.files[0]['name'];
                    var idxDot = fileName.lastIndexOf(".") + 1;
                    var extFile = fileName.substr(idxDot, fileName.length).toLowerCase();

                    if (extFile == "jpg") {
                        reader.onload = function (e) {
                            var image = new Image();
                            image.src = e.target.result;

                            image.onload = function () {
                                if (this.height != 128 && this.width != 128) {
                                    alert("Please upload proper image with exact size : 128 x 128");
                                }
                                else {
                                    var model = {
                                        id: @Model.ID,
                                        avatar: e.target.result
                                    };

                                    $.ajax({
                                        type: "POST",
                                        url: '@Url.Content("~/")' + "UserSetup/UploadAvatar",
                                        data: JSON.stringify(model),
                                        contentType: "application/json; charset=utf-8",
                                        dataType: "json",
                                        success: function (response) {
                                            if (response.success) {
                                                $('#img').attr('src', response.src);
                                                $('#btnAddAvatar').hide();
                                                $('#btnRemoveAvatar').show();
                                            }
                                        },
                                        error: function () {
                                            alert("Error!");
                                        }
                                    });
                                }
                            }
                        };
                        reader.readAsDataURL(input.files[0]);
                    }
                    else {
                        alert("Only jpg files are allowed!");
                    }
                };
            };

            $("#btnRemoveAvatar").click(function () {
                var model = {
                    id: @Model.ID,
                };

                $.ajax({
                    type: "POST",
                    url: '@Url.Content("~/")' + "UserSetup/DeleteAvatar",
                    data: JSON.stringify(model),
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    success: function (response) {
                        if (response.success) {
                            $('#img').attr('src', response.src);
                            $('#btnAddAvatar').show();
                            $('#btnRemoveAvatar').hide();
                        }
                    },
                    error: function () {
                        alert("Error!");
                    }
                });
            });
        </script>
    }
}
